{"version":3,"sources":["../../src/classes/resolver.ts","../../src/constants.ts","../../src/classes/errors.ts","../../src/classes/generateTeal.ts"],"sourcesContent":["import algosdk from \"algosdk\";\nimport { APP_ID, ALLOWED_SOCIALS } from \"../constants\";\nimport { InvalidNameError, AddressValidationError } from \"./errors\";\nimport { generateTeal } from \"./generateTeal\";\n\ndeclare const Buffer: any;\n\nexport class Resolver {\n  private algodClient: any;\n  private indexerClient: any;\n\n  constructor(client?: any, indexer?: any) {\n    this.algodClient = client;\n    this.indexerClient = indexer;\n  }\n\n  async generateLsig(name: string) {\n    const client = this.algodClient;\n    let program = await client.compile(generateTeal(name)).do();\n    program = new Uint8Array(Buffer.from(program.result, \"base64\"));\n    return new algosdk.LogicSigAccount(program);\n  }\n\n  async resolveName(name: string) {\n    if (name.length === 0 || name.length > 64) {\n      throw new InvalidNameError();\n    } else {\n      name = name.split(\".algo\")[0];\n      name = name.toLowerCase();\n      const indexer = await this.indexerClient;\n      const lsig = await this.generateLsig(name);\n\n      try {\n        let accountInfo = await indexer.lookupAccountByID(lsig.address()).do();\n\n        accountInfo = accountInfo.account[\"apps-local-state\"];\n\n        const length = accountInfo.length;\n        let owner;\n        let found = false;\n        let socials: any = [],\n          metadata: any = [];\n        for (let i = 0; i < length; i++) {\n          const app = accountInfo[i];\n          if (app.id === APP_ID) {\n            const kv = app[\"key-value\"];\n            const decodedKvPairs = this.decodeKvPairs(kv);\n            socials = this.filterKvPairs(decodedKvPairs, \"socials\");\n            metadata = this.filterKvPairs(decodedKvPairs, \"metadata\");\n            found = true;\n            owner = metadata.filter((kv: any) => kv.key === \"owner\")[0].value;\n          }\n        }\n\n        if (found) {\n          return {\n            found: true,\n            address: owner,\n            socials: socials,\n            metadata: metadata,\n          };\n        } else return { found: false };\n      } catch (err) {\n        return { found: false };\n      }\n    }\n  }\n\n  async getNamesOwnedByAddress(\n    address: string,\n    socials?: boolean,\n    metadata?: boolean,\n    limit?: number\n  ) {\n    const isValidAddress: boolean = await algosdk.isValidAddress(address);\n    if (!isValidAddress) {\n      throw new AddressValidationError();\n    } else {\n      const indexer = await this.indexerClient;\n\n      let nextToken = \"\";\n      let txnLength = 1;\n      let txns = [];\n      while (txnLength > 0) {\n        try {\n          const info = await indexer\n            .searchForTransactions()\n            .address(address)\n            .addressRole(\"sender\")\n            .afterTime(\"2022-02-24\")\n            .txType(\"appl\")\n            .applicationID(APP_ID)\n            .nextToken(nextToken)\n            .do();\n\n          txnLength = info.transactions.length;\n          if (txnLength > 0) {\n            nextToken = info[\"next-token\"];\n            txns.push(info.transactions);\n          }\n        } catch (err) {\n          return false;\n        }\n      }\n\n      let accountTxns: any = [];\n      for (let i = 0; i < txns.length; i++) {\n        accountTxns = accountTxns.concat(txns[i]);\n      }\n\n      txns = accountTxns;\n      const names: any = await this.filterDomainRegistrationTxns(txns);\n\n      if (names.length > 0) {\n        const details = [];\n\n        for (let i = 0; i < names.length; i++) {\n          if (limit !== undefined) {\n            if (details.length >= limit) break;\n          }\n\n          const info: any = await this.resolveName(names[i]);\n          if (info.found && info.address !== undefined) {\n            if (info.address === address) {\n              const domain: any = {\n                name: \"\",\n              };\n              domain.name = names[i] + \".algo\";\n              if (socials) domain[\"socials\"] = info.socials;\n              if (metadata) domain[\"metadata\"] = info.metadata;\n              details.push(domain);\n            }\n          } else {\n            i = i - 1;\n          }\n        }\n        return details;\n      }\n    }\n  }\n\n  filterKvPairs(kvPairs: any, type: string) {\n    const socials = [],\n      metadata = [];\n\n    for (const i in kvPairs) {\n      const key = kvPairs[i].key;\n      const value = kvPairs[i].value;\n\n      const kvObj = {\n        key: key,\n        value: value,\n      };\n\n      if (ALLOWED_SOCIALS.includes(key)) socials.push(kvObj);\n      else metadata.push(kvObj);\n    }\n    if (type === \"socials\") return socials;\n    else if (type === \"metadata\") return metadata;\n  }\n\n  decodeKvPairs(kvPairs: any) {\n    return kvPairs.map((kvPair: any) => {\n      const decodedKvPair = {\n        key: \"\",\n        value: \"\",\n      };\n      let key: string = kvPair.key;\n      key = Buffer.from(key, \"base64\").toString();\n      decodedKvPair.key = key;\n      const value: any = kvPair.value;\n      if (key === \"owner\") {\n        decodedKvPair.value = algosdk.encodeAddress(\n          new Uint8Array(Buffer.from(value.bytes, \"base64\"))\n        );\n      } else if (value.type === 1) {\n        decodedKvPair.value = Buffer.from(value.bytes, \"base64\").toString();\n      } else if (value.type === 2) {\n        decodedKvPair.value = value.uint;\n      }\n      return decodedKvPair;\n    });\n  }\n\n  async filterDomainRegistrationTxns(txns: any) {\n    const names: any = [];\n    const indexer = this.indexerClient;\n    try {\n      for (let i = 0; i < txns.length; i++) {\n        const txn = txns[i];\n\n        if (txn[\"tx-type\"] === \"appl\") {\n          if (txn[\"application-transaction\"][\"application-id\"] === APP_ID) {\n            const appArgs = txn[\"application-transaction\"][\"application-args\"];\n\n            if (\n              Buffer.from(appArgs[0], \"base64\").toString() === \"register_name\"\n            ) {\n              if (!names.includes(Buffer.from(appArgs[1], \"base64\").toString()))\n                names.push(Buffer.from(appArgs[1], \"base64\").toString());\n            } else if (\n              Buffer.from(appArgs[0], \"base64\").toString() === \"accept_transfer\"\n            ) {\n              const lsigAccount = txn[\"application-transaction\"][\"accounts\"][0];\n              let accountInfo = await indexer\n                .lookupAccountByID(lsigAccount)\n                .do();\n              accountInfo = accountInfo.account[\"apps-local-state\"];\n\n              const length = accountInfo.length;\n\n              for (let i = 0; i < length; i++) {\n                if (accountInfo[i].id === APP_ID) {\n                  const kvPairs = accountInfo[i][\"key-value\"];\n                  const domainInfo = this.decodeKvPairs(kvPairs).filter(\n                    (domain: any) => domain.key === \"name\"\n                  );\n                  if (!names.includes(domainInfo[0].value))\n                    names.push(domainInfo[0].value);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      return [];\n    }\n\n    return names;\n  }\n\n  async owner(name: string) {\n    const domainInformation: any = await this.resolveName(\n      name.split(\".algo\")[0]\n    );\n    if (domainInformation.found === true) {\n      return domainInformation.address;\n    } else return \"Not Registered\";\n  }\n\n  async text(name: string, key: string) {\n    const domainInformation: any = await this.resolveName(name);\n    if (domainInformation.found === true) {\n      const textRecords = domainInformation.socials.filter(\n        (social: any) => social.key === key\n      );\n      if (textRecords.length > 0)\n        return domainInformation.socials.filter(\n          (social: any) => social.key === key\n        )[0].value;\n      else return \"Property Not Set\";\n    } else return \"Not Registered\";\n  }\n\n  async expiry(name: string) {\n    const domainInformation: any = await this.resolveName(\n      name.split(\".algo\")[0]\n    );\n    if (domainInformation.found === true) {\n      return new Date(\n        domainInformation.metadata.filter(\n          (data: any) => data.key === \"expiry\"\n        )[0].value * 1000\n      );\n    } else return \"Not Registered\";\n  }\n\n  async content() {\n    //TODO: Must return the content value\n  }\n}\n","export const APP_ID = 628095415;\n\nexport const REGISTRATION_PRICE = {\n  CHAR_3_AMOUNT: 150000000,\n  CHAR_4_AMOUNT: 50000000,\n  CHAR_5_AMOUNT: 5000000,\n};\n\nexport const TRANSFER_FEE = 2000000;\n\nexport const IPFS_LINK = \"https://ipfs.infura.io/ipfs/\";\n\nexport const ASCII_CODES = {\n  ASCII_A: 97,\n  ASCII_Z: 122,\n  ASCII_0: 48,\n  ASCII_9: 57,\n};\n\nexport const ALLOWED_SOCIALS = [\n  \"github\",\n  \"twitter\",\n  \"telegram\",\n  \"youtube\",\n  \"reddit\",\n  \"discord\",\n];\n","export class AddressValidationError extends Error {\n  name: string;\n  type: string;\n  constructor() {\n    super(`This is not a valid Algorand address`);\n    this.name = \"InvalidAddressError\";\n    this.type = \"InvalidAddressError\";\n  }\n}\n\nexport class InvalidNameError extends Error {\n  name: string;\n  type: string;\n  constructor() {\n    super(\n      `The name must be between 3 and 64 characters and must only contain a-z and 0-9 characters`\n    );\n    this.name = \"InvalidNameError\";\n    this.type = \"InvalidNameError\";\n  }\n}\n\nexport class NameNotRegisteredError extends Error {\n  name: string;\n  type: string;\n  constructor(name: string) {\n    super(`Name ${name} is not registered`);\n    this.name = \"NameNotRegisteredError\";\n    this.type = \"NameNotRegisteredError\";\n  }\n}\n\nexport class IncorrectOwnerError extends Error {\n  name: string;\n  type: string;\n  constructor(name: string, address: string) {\n    super(`Name ${name}.algo is not owned by ${address}`);\n    this.name = \"IncorrectOwnerError\";\n    this.type = \"IncorrectOwnerError\";\n  }\n}\n","export function generateTeal(name: string) {\n  return `#pragma version 4\n    byte \"${name}\"\n    len\n    int 3\n    ==\n    bnz main_l22\n    byte \"${name}\"\n    len\n    int 4\n    ==\n    bnz main_l13\n    byte \"${name}\"\n    len\n    int 5\n    >=\n    bnz main_l4\n    err\n    main_l4:\n    gtxn 0 Amount\n    int 5000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l5:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l12\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l11\n    global GroupSize\n    int 4\n    ==\n    bnz main_l10\n    int 0\n    return\n    main_l9:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l10:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l11:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l12:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l5\n    main_l13:\n    gtxn 0 Amount\n    int 50000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l14:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l21\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l20\n    global GroupSize\n    int 4\n    ==\n    bnz main_l19\n    int 0\n    return\n    main_l18:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l19:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l20:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l21:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l14\n    main_l22:\n    gtxn 0 Amount\n    int 150000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l23:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l30\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l29\n    global GroupSize\n    int 4\n    ==\n    bnz main_l28\n    int 0\n    return\n    main_l27:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l28:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l29:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l30:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l23\n    main_l31:\n    return`;\n}\n"],"mappings":"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","names":[]}