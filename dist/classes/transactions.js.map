{"version":3,"sources":["../../src/classes/transactions.ts","../../src/constants.ts","../../src/classes/generateTeal.ts"],"sourcesContent":["import algosdk from \"algosdk\";\nimport { APP_ID, REGISTRATION_PRICE, TRANSFER_FEE } from \"../constants\";\nimport { generateTeal } from \"./generateTeal\";\n\nexport class Transactions {\n  private algodClient: any;\n\n  constructor(client?: any) {\n    this.algodClient = client;\n  }\n\n  async generateLsig(name: string) {\n    const client = this.algodClient;\n    let program = await client.compile(generateTeal(name)).do();\n    program = new Uint8Array(Buffer.from(program.result, \"base64\"));\n\n    return new algosdk.LogicSigAccount(program);\n  }\n\n  async prepareNameRegistrationTransactions(\n    name: string,\n    address: string,\n    period: number\n  ) {\n    const algodClient = this.algodClient;\n\n    /* 1st Txn - Payment to Smart Contract */\n\n    let amount = 0;\n    const lsig = await this.generateLsig(name);\n    const params = await algodClient.getTransactionParams().do();\n\n    params.fee = 1000;\n    params.flatFee = true;\n\n    let receiver = algosdk.getApplicationAddress(APP_ID);\n    let sender = address;\n\n    if (period === undefined) period = 0;\n    else period--;\n\n    if (name.length < 3) return;\n    else if (name.length === 3)\n      amount =\n        REGISTRATION_PRICE.CHAR_3_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_3_AMOUNT;\n    else if (name.length === 4)\n      amount =\n        REGISTRATION_PRICE.CHAR_4_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_4_AMOUNT;\n    else if (name.length >= 5)\n      amount =\n        REGISTRATION_PRICE.CHAR_5_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_5_AMOUNT;\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n\n    const txn1 = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amount,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    const groupTxns = [];\n    groupTxns.push(txn1);\n\n    /* 2nd Txn - Funding Lsig */\n\n    sender = address;\n    receiver = lsig.address();\n    amount = 915000;\n\n    const txn2 = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amount,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    groupTxns.push(txn2);\n\n    /* 3rd Txn - Optin to App from Lsig */\n\n    const txn3 = await algosdk.makeApplicationOptInTxnFromObject({\n      from: lsig.address(),\n      suggestedParams: params,\n      appIndex: APP_ID,\n    });\n\n    groupTxns.push(txn3);\n\n    sender = lsig.address();\n    receiver = address;\n    amount = 0;\n\n    /* 4th Txn - Account registers name */\n\n    const method = \"register_name\";\n\n    const appArgs = [];\n\n    period++;\n\n    appArgs.push(new Uint8Array(Buffer.from(method)));\n    appArgs.push(new Uint8Array(Buffer.from(name)));\n    appArgs.push(algosdk.encodeUint64(period));\n    const txn4 = await algosdk.makeApplicationNoOpTxn(\n      address,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n    groupTxns.push(txn4);\n\n    algosdk.assignGroupID(groupTxns);\n\n    const signedOptinTxn = algosdk.signLogicSigTransaction(groupTxns[2], lsig);\n\n    return {\n      optinTxn: signedOptinTxn,\n      txns: groupTxns,\n      unsignedOptinTxn: groupTxns[2],\n    };\n  }\n\n  async prepareUpdateNamePropertyTransactions(\n    name: string,\n    address: string,\n    editedHandles: any\n  ) {\n    const algodClient = this.algodClient;\n\n    const lsig = await this.generateLsig(name);\n    const params = await algodClient.getTransactionParams().do();\n    params.fee = 1000;\n    params.flatFee = true;\n\n    const method = \"update_name\";\n\n    const groupTxns = [];\n\n    for (const key in editedHandles) {\n      const appArgs = [];\n      const network = key;\n      const handle = editedHandles[key];\n\n      appArgs.push(new Uint8Array(Buffer.from(method)));\n      appArgs.push(new Uint8Array(Buffer.from(network)));\n      appArgs.push(new Uint8Array(Buffer.from(handle)));\n\n      const txn = await algosdk.makeApplicationNoOpTxn(\n        address,\n        params,\n        APP_ID,\n        appArgs,\n        [lsig.address()]\n      );\n      groupTxns.push(txn);\n    }\n\n    if (Object.keys(editedHandles).length > 1) algosdk.assignGroupID(groupTxns);\n\n    return groupTxns;\n  }\n\n  async preparePaymentTxn(\n    sender: string,\n    receiver: string,\n    amt: number,\n    note?: any\n  ) {\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n    amt = algosdk.algosToMicroalgos(amt);\n    const enc = new TextEncoder();\n    note = enc.encode(note);\n    const closeToRemaninder = undefined;\n\n    return algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n  }\n\n  async prepareNameRenewalTxns(\n    name: string,\n    sender: string,\n    years: number,\n    amt: number\n  ) {\n    name = name.split(\".algo\")[0];\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n    const receiver = algosdk.getApplicationAddress(APP_ID);\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const paymentTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"renew_name\")));\n    appArgs.push(algosdk.encodeUint64(years));\n\n    const applicationTxn = algosdk.makeApplicationNoOpTxn(\n      sender,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n\n    algosdk.assignGroupID([paymentTxn, applicationTxn]);\n\n    return [paymentTxn, applicationTxn];\n  }\n\n  async prepareInitiateNameTransferTransaction(\n    name: string,\n    sender: string,\n    newOwner: string,\n    price: number\n  ) {\n    const algodClient = this.algodClient;\n    price = algosdk.algosToMicroalgos(price);\n    const params = await algodClient.getTransactionParams().do();\n    name = name.split(\".algo\")[0];\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"initiate_transfer\")));\n    appArgs.push(algosdk.encodeUint64(price));\n\n    return algosdk.makeApplicationNoOpTxn(sender, params, APP_ID, appArgs, [\n      lsig.address(),\n      newOwner,\n    ]);\n  }\n\n  async prepareAcceptNameTransferTransactions(\n    name: string,\n    sender: string,\n    receiver: string,\n    amt: number\n  ) {\n    amt = algosdk.algosToMicroalgos(amt);\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const paymentToOwnerTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    receiver = algosdk.getApplicationAddress(APP_ID);\n\n    const paymentToSmartContractTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      TRANSFER_FEE,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    name = name.split(\".algo\")[0];\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"accept_transfer\")));\n\n    const applicationTxn = algosdk.makeApplicationNoOpTxn(\n      sender,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n\n    algosdk.assignGroupID([\n      paymentToOwnerTxn,\n      paymentToSmartContractTxn,\n      applicationTxn,\n    ]);\n\n    return [paymentToOwnerTxn, paymentToSmartContractTxn, applicationTxn];\n  }\n}\n","export const APP_ID = 628095415;\n\nexport const REGISTRATION_PRICE = {\n  CHAR_3_AMOUNT: 150000000,\n  CHAR_4_AMOUNT: 50000000,\n  CHAR_5_AMOUNT: 5000000,\n};\n\nexport const TRANSFER_FEE = 2000000;\n\nexport const IPFS_LINK = \"https://ipfs.infura.io/ipfs/\";\n\nexport const ASCII_CODES = {\n  ASCII_A: 97,\n  ASCII_Z: 122,\n  ASCII_0: 48,\n  ASCII_9: 57,\n};\n\nexport const ALLOWED_SOCIALS = [\n  \"github\",\n  \"twitter\",\n  \"telegram\",\n  \"youtube\",\n  \"reddit\",\n  \"discord\",\n];\n","export function generateTeal(name: string) {\n  return `#pragma version 4\n    byte \"${name}\"\n    len\n    int 3\n    ==\n    bnz main_l22\n    byte \"${name}\"\n    len\n    int 4\n    ==\n    bnz main_l13\n    byte \"${name}\"\n    len\n    int 5\n    >=\n    bnz main_l4\n    err\n    main_l4:\n    gtxn 0 Amount\n    int 5000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l5:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l12\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l11\n    global GroupSize\n    int 4\n    ==\n    bnz main_l10\n    int 0\n    return\n    main_l9:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l10:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l11:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l12:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l5\n    main_l13:\n    gtxn 0 Amount\n    int 50000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l14:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l21\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l20\n    global GroupSize\n    int 4\n    ==\n    bnz main_l19\n    int 0\n    return\n    main_l18:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l19:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l20:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l21:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l14\n    main_l22:\n    gtxn 0 Amount\n    int 150000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l23:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l30\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l29\n    global GroupSize\n    int 4\n    ==\n    bnz main_l28\n    int 0\n    return\n    main_l27:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l28:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l29:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l30:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l23\n    main_l31:\n    return`;\n}\n"],"mappings":"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","names":[]}