{"version":3,"sources":["../src/index.ts","../src/classes/resolver.ts","../src/constants.ts","../src/classes/errors.ts","../src/classes/generateTeal.ts","../src/classes/transactions.ts","../src/utility/common.ts"],"sourcesContent":["import { Resolver } from \"./classes/resolver\";\nimport { Transactions } from \"./classes/transactions\";\nimport {\n  AddressValidationError,\n  IncorrectOwnerError,\n  InvalidNameError,\n  NameNotRegisteredError,\n} from \"./classes/errors\";\nimport {\n  NameConstructor,\n  AddressConstructor,\n  DomainInformation,\n  Domains,\n  DomainOptions,\n  RegistrationTxns,\n} from \"./interfaces/interfaces\";\nimport { isValidAddress, isValidName } from \"./utility/common\";\n\nclass Name {\n  private name = \"\";\n  private resolver: any;\n  private transactions: any;\n  constructor(options: NameConstructor) {\n    const { name, client, indexer } = options;\n    this.name = name;\n    this.resolver = new Resolver(client, indexer);\n    this.transactions = new Transactions(client);\n  }\n\n  async isRegistered(): Promise<boolean> {\n    const status = await this.resolver.resolveName(this.name);\n    return status.found;\n  }\n\n  async getOwner(): Promise<string> {\n    return await this.resolver.owner(this.name);\n  }\n\n  async getContent(): Promise<string> {\n    return await this.resolver.content(this.name);\n  }\n\n  async getText(key: string): Promise<string> {\n    return await this.resolver.text(this.name, key);\n  }\n\n  async getAllInformation(): Promise<DomainInformation> {\n    return await this.resolver.resolveName(this.name);\n  }\n\n  async getExpiry(): Promise<Date | string> {\n    return await this.resolver.expiry(this.name);\n  }\n\n  async isValidTransaction(\n    sender: string,\n    receiver?: string,\n    method?: string\n  ): Promise<\n    | boolean\n    | IncorrectOwnerError\n    | InvalidNameError\n    | AddressValidationError\n    | NameNotRegisteredError\n  > {\n    if (!(await this.isRegistered()))\n      throw new NameNotRegisteredError(this.name);\n    if (!isValidAddress(sender)) throw new AddressValidationError();\n    if (receiver) {\n      if (!isValidAddress(receiver)) throw new AddressValidationError();\n    }\n    const owner: string = await this.getOwner();\n    if (!(await isValidName(this.name))) throw new InvalidNameError();\n    if (!(await isValidAddress(sender))) throw new AddressValidationError();\n    if (!receiver && !method) {\n      if (owner !== sender) {\n        throw new IncorrectOwnerError(this.name, sender);\n      }\n    } else if (sender && receiver) {\n      if (method === \"initiate_transfer\") {\n        if (owner !== sender) {\n          throw new IncorrectOwnerError(this.name, sender);\n        }\n      } else if (method === \"accept_transfer\") {\n        if (owner !== receiver) {\n          throw new IncorrectOwnerError(this.name, receiver);\n        }\n      }\n    }\n    return true;\n  }\n\n  async register(address: string, period: number): Promise<RegistrationTxns> {\n    if (await this.isRegistered()) throw new Error(\"Name already registered\");\n    if (!isValidAddress(address)) throw new AddressValidationError();\n    else {\n      return await this.transactions.prepareNameRegistrationTransactions(\n        this.name,\n        address,\n        period\n      );\n    }\n  }\n\n  async update(address: string, editedHandles: object[]): Promise<object[]> {\n    await this.isValidTransaction(address);\n    return await this.transactions.prepareUpdateNamePropertyTransactions(\n      this.name,\n      address,\n      editedHandles\n    );\n  }\n\n  async renew(address: string, years: number): Promise<object[]> {\n    await this.isValidTransaction(address);\n    return await this.transactions.prepareNameRenewalTxns(\n      this.name,\n      address,\n      years\n    );\n  }\n\n  async initTransfer(\n    owner: string,\n    newOwner: string,\n    price: number\n  ): Promise<object> {\n    await this.isValidTransaction(owner, newOwner, \"initiate_transfer\");\n    return await this.transactions.prepareInitiateNameTransferTransaction(\n      this.name,\n      owner,\n      newOwner,\n      price\n    );\n  }\n\n  async acceptTransfer(\n    newOwner: string,\n    owner: string,\n    price: number\n  ): Promise<object[]> {\n    await this.isValidTransaction(newOwner, owner, \"accept_transfer\");\n    return await this.transactions.prepareAcceptNameTransferTransactions(\n      this.name,\n      newOwner,\n      owner,\n      price\n    );\n  }\n}\n\nclass Address {\n  private address = \"\";\n  private resolver: any;\n  constructor(options: AddressConstructor) {\n    const { address, client, indexer } = options;\n    this.address = address;\n    this.resolver = new Resolver(client, indexer);\n  }\n\n  async getNames(options?: DomainOptions): Promise<Domains | []> {\n    const socials = options?.socials || false,\n      metadata = options?.metadata || false,\n      limit = options?.metadata;\n    return await this.resolver.getNamesOwnedByAddress(\n      this.address,\n      socials,\n      metadata,\n      limit\n    );\n  }\n}\n\nexport class ANS {\n  private client: any;\n  private indexer: any;\n\n  constructor(client: any, indexer: any) {\n    this.client = client;\n    this.indexer = indexer;\n  }\n\n  name(name: string): Name {\n    if (name.length > 0) name = name.toLowerCase();\n    name = name.split(\".algo\")[0];\n    if (!isValidName(name)) throw new InvalidNameError();\n    return new Name({\n      client: this.client,\n      indexer: this.indexer,\n      name: name,\n    });\n  }\n\n  address(address: string): Address {\n    if (!isValidAddress(address)) throw new AddressValidationError();\n    return new Address({\n      client: this.client,\n      indexer: this.indexer,\n      address: address,\n    });\n  }\n}\n","import algosdk from \"algosdk\";\nimport { APP_ID, ALLOWED_SOCIALS } from \"../constants\";\nimport { InvalidNameError, AddressValidationError } from \"./errors\";\nimport { generateTeal } from \"./generateTeal\";\n\ndeclare const Buffer: any;\n\nexport class Resolver {\n  private algodClient: any;\n  private indexerClient: any;\n\n  constructor(client?: any, indexer?: any) {\n    this.algodClient = client;\n    this.indexerClient = indexer;\n  }\n\n  async generateLsig(name: string) {\n    const client = this.algodClient;\n    let program = await client.compile(generateTeal(name)).do();\n    program = new Uint8Array(Buffer.from(program.result, \"base64\"));\n    return new algosdk.LogicSigAccount(program);\n  }\n\n  async resolveName(name: string) {\n    if (name.length === 0 || name.length > 64) {\n      throw new InvalidNameError();\n    } else {\n      name = name.split(\".algo\")[0];\n      name = name.toLowerCase();\n      const indexer = await this.indexerClient;\n      const lsig = await this.generateLsig(name);\n\n      try {\n        let accountInfo = await indexer.lookupAccountByID(lsig.address()).do();\n\n        accountInfo = accountInfo.account[\"apps-local-state\"];\n\n        const length = accountInfo.length;\n        let owner;\n        let found = false;\n        let socials: any = [],\n          metadata: any = [];\n        for (let i = 0; i < length; i++) {\n          const app = accountInfo[i];\n          if (app.id === APP_ID) {\n            const kv = app[\"key-value\"];\n            const decodedKvPairs = this.decodeKvPairs(kv);\n            socials = this.filterKvPairs(decodedKvPairs, \"socials\");\n            metadata = this.filterKvPairs(decodedKvPairs, \"metadata\");\n            found = true;\n            owner = metadata.filter((kv: any) => kv.key === \"owner\")[0].value;\n          }\n        }\n\n        if (found) {\n          return {\n            found: true,\n            address: owner,\n            socials: socials,\n            metadata: metadata,\n          };\n        } else return { found: false };\n      } catch (err) {\n        return { found: false };\n      }\n    }\n  }\n\n  async getNamesOwnedByAddress(\n    address: string,\n    socials?: boolean,\n    metadata?: boolean,\n    limit?: number\n  ) {\n    const isValidAddress: boolean = await algosdk.isValidAddress(address);\n    if (!isValidAddress) {\n      throw new AddressValidationError();\n    } else {\n      const indexer = await this.indexerClient;\n\n      let nextToken = \"\";\n      let txnLength = 1;\n      let txns = [];\n      while (txnLength > 0) {\n        try {\n          const info = await indexer\n            .searchForTransactions()\n            .address(address)\n            .addressRole(\"sender\")\n            .afterTime(\"2022-02-24\")\n            .txType(\"appl\")\n            .applicationID(APP_ID)\n            .nextToken(nextToken)\n            .do();\n\n          txnLength = info.transactions.length;\n          if (txnLength > 0) {\n            nextToken = info[\"next-token\"];\n            txns.push(info.transactions);\n          }\n        } catch (err) {\n          return false;\n        }\n      }\n\n      let accountTxns: any = [];\n      for (let i = 0; i < txns.length; i++) {\n        accountTxns = accountTxns.concat(txns[i]);\n      }\n\n      txns = accountTxns;\n      const names: any = await this.filterDomainRegistrationTxns(txns);\n\n      if (names.length > 0) {\n        const details = [];\n\n        for (let i = 0; i < names.length; i++) {\n          if (limit !== undefined) {\n            if (details.length >= limit) break;\n          }\n\n          const info: any = await this.resolveName(names[i]);\n          if (info.found && info.address !== undefined) {\n            if (info.address === address) {\n              const domain: any = {\n                name: \"\",\n              };\n              domain.name = names[i] + \".algo\";\n              if (socials) domain[\"socials\"] = info.socials;\n              if (metadata) domain[\"metadata\"] = info.metadata;\n              details.push(domain);\n            }\n          } else {\n            i = i - 1;\n          }\n        }\n        return details;\n      }\n    }\n  }\n\n  filterKvPairs(kvPairs: any, type: string) {\n    const socials = [],\n      metadata = [];\n\n    for (const i in kvPairs) {\n      const key = kvPairs[i].key;\n      const value = kvPairs[i].value;\n\n      const kvObj = {\n        key: key,\n        value: value,\n      };\n\n      if (ALLOWED_SOCIALS.includes(key)) socials.push(kvObj);\n      else metadata.push(kvObj);\n    }\n    if (type === \"socials\") return socials;\n    else if (type === \"metadata\") return metadata;\n  }\n\n  decodeKvPairs(kvPairs: any) {\n    return kvPairs.map((kvPair: any) => {\n      const decodedKvPair = {\n        key: \"\",\n        value: \"\",\n      };\n      let key: string = kvPair.key;\n      key = Buffer.from(key, \"base64\").toString();\n      decodedKvPair.key = key;\n      const value: any = kvPair.value;\n      if (key === \"owner\") {\n        decodedKvPair.value = algosdk.encodeAddress(\n          new Uint8Array(Buffer.from(value.bytes, \"base64\"))\n        );\n      } else if (value.type === 1) {\n        decodedKvPair.value = Buffer.from(value.bytes, \"base64\").toString();\n      } else if (value.type === 2) {\n        decodedKvPair.value = value.uint;\n      }\n      return decodedKvPair;\n    });\n  }\n\n  async filterDomainRegistrationTxns(txns: any) {\n    const names: any = [];\n    const indexer = this.indexerClient;\n    try {\n      for (let i = 0; i < txns.length; i++) {\n        const txn = txns[i];\n\n        if (txn[\"tx-type\"] === \"appl\") {\n          if (txn[\"application-transaction\"][\"application-id\"] === APP_ID) {\n            const appArgs = txn[\"application-transaction\"][\"application-args\"];\n\n            if (\n              Buffer.from(appArgs[0], \"base64\").toString() === \"register_name\"\n            ) {\n              if (!names.includes(Buffer.from(appArgs[1], \"base64\").toString()))\n                names.push(Buffer.from(appArgs[1], \"base64\").toString());\n            } else if (\n              Buffer.from(appArgs[0], \"base64\").toString() === \"accept_transfer\"\n            ) {\n              const lsigAccount = txn[\"application-transaction\"][\"accounts\"][0];\n              let accountInfo = await indexer\n                .lookupAccountByID(lsigAccount)\n                .do();\n              accountInfo = accountInfo.account[\"apps-local-state\"];\n\n              const length = accountInfo.length;\n\n              for (let i = 0; i < length; i++) {\n                if (accountInfo[i].id === APP_ID) {\n                  const kvPairs = accountInfo[i][\"key-value\"];\n                  const domainInfo = this.decodeKvPairs(kvPairs).filter(\n                    (domain: any) => domain.key === \"name\"\n                  );\n                  if (!names.includes(domainInfo[0].value))\n                    names.push(domainInfo[0].value);\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      return [];\n    }\n\n    return names;\n  }\n\n  async owner(name: string) {\n    const domainInformation: any = await this.resolveName(\n      name.split(\".algo\")[0]\n    );\n    if (domainInformation.found === true) {\n      return domainInformation.address;\n    } else return \"Not Registered\";\n  }\n\n  async text(name: string, key: string) {\n    const domainInformation: any = await this.resolveName(name);\n    if (domainInformation.found === true) {\n      const textRecords = domainInformation.socials.filter(\n        (social: any) => social.key === key\n      );\n      if (textRecords.length > 0)\n        return domainInformation.socials.filter(\n          (social: any) => social.key === key\n        )[0].value;\n      else return \"Property Not Set\";\n    } else return \"Not Registered\";\n  }\n\n  async expiry(name: string) {\n    const domainInformation: any = await this.resolveName(\n      name.split(\".algo\")[0]\n    );\n    if (domainInformation.found === true) {\n      return new Date(\n        domainInformation.metadata.filter(\n          (data: any) => data.key === \"expiry\"\n        )[0].value * 1000\n      );\n    } else return \"Not Registered\";\n  }\n\n  async content() {\n    //TODO: Must return the content value\n  }\n}\n","export const APP_ID = 628095415;\n\nexport const REGISTRATION_PRICE = {\n  CHAR_3_AMOUNT: 150000000,\n  CHAR_4_AMOUNT: 50000000,\n  CHAR_5_AMOUNT: 5000000,\n};\n\nexport const TRANSFER_FEE = 2000000;\n\nexport const IPFS_LINK = \"https://ipfs.infura.io/ipfs/\";\n\nexport const ASCII_CODES = {\n  ASCII_A: 97,\n  ASCII_Z: 122,\n  ASCII_0: 48,\n  ASCII_9: 57,\n};\n\nexport const ALLOWED_SOCIALS = [\n  \"github\",\n  \"twitter\",\n  \"telegram\",\n  \"youtube\",\n  \"reddit\",\n  \"discord\",\n];\n","export class AddressValidationError extends Error {\n  name: string;\n  type: string;\n  constructor() {\n    super(`This is not a valid Algorand address`);\n    this.name = \"InvalidAddressError\";\n    this.type = \"InvalidAddressError\";\n  }\n}\n\nexport class InvalidNameError extends Error {\n  name: string;\n  type: string;\n  constructor() {\n    super(\n      `The name must be between 3 and 64 characters and must only contain a-z and 0-9 characters`\n    );\n    this.name = \"InvalidNameError\";\n    this.type = \"InvalidNameError\";\n  }\n}\n\nexport class NameNotRegisteredError extends Error {\n  name: string;\n  type: string;\n  constructor(name: string) {\n    super(`Name ${name} is not registered`);\n    this.name = \"NameNotRegisteredError\";\n    this.type = \"NameNotRegisteredError\";\n  }\n}\n\nexport class IncorrectOwnerError extends Error {\n  name: string;\n  type: string;\n  constructor(name: string, address: string) {\n    super(`Name ${name}.algo is not owned by ${address}`);\n    this.name = \"IncorrectOwnerError\";\n    this.type = \"IncorrectOwnerError\";\n  }\n}\n","export function generateTeal(name: string) {\n  return `#pragma version 4\n    byte \"${name}\"\n    len\n    int 3\n    ==\n    bnz main_l22\n    byte \"${name}\"\n    len\n    int 4\n    ==\n    bnz main_l13\n    byte \"${name}\"\n    len\n    int 5\n    >=\n    bnz main_l4\n    err\n    main_l4:\n    gtxn 0 Amount\n    int 5000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l5:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l12\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l11\n    global GroupSize\n    int 4\n    ==\n    bnz main_l10\n    int 0\n    return\n    main_l9:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l10:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l11:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l9\n    main_l12:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l5\n    main_l13:\n    gtxn 0 Amount\n    int 50000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l14:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l21\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l20\n    global GroupSize\n    int 4\n    ==\n    bnz main_l19\n    int 0\n    return\n    main_l18:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l19:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l20:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l18\n    main_l21:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l14\n    main_l22:\n    gtxn 0 Amount\n    int 150000000\n    >=\n    assert\n    byte \"${name}\"\n    len\n    int 64\n    <=\n    assert\n    int 0\n    store 0\n    main_l23:\n    load 0\n    byte \"${name}\"\n    len\n    <\n    bnz main_l30\n    global GroupSize\n    int 2\n    ==\n    global GroupSize\n    int 4\n    ==\n    ||\n    assert\n    gtxn 0 Sender\n    gtxn 1 Sender\n    ==\n    assert\n    gtxn 0 Receiver\n    addr SYGCDTWGBXKV4ZL5YAWSYAVOUC25U2XDB6SMQHLRCTYVF566TQZ3EOABH4\n    ==\n    assert\n    global GroupSize\n    int 2\n    ==\n    bnz main_l29\n    global GroupSize\n    int 4\n    ==\n    bnz main_l28\n    int 0\n    return\n    main_l27:\n    int 1\n    assert\n    int 1\n    b main_l31\n    main_l28:\n    gtxn 1 Receiver\n    gtxn 2 Sender\n    ==\n    gtxn 2 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 2 OnCompletion\n    int OptIn\n    ==\n    &&\n    gtxn 3 ApplicationID\n    int 628095415\n    ==\n    &&\n    gtxn 3 Sender\n    gtxn 0 Sender\n    ==\n    &&\n    gtxna 3 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 3 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l29:\n    gtxn 1 ApplicationID\n    int 628095415\n    ==\n    gtxna 1 ApplicationArgs 0\n    byte \"register_name\"\n    ==\n    &&\n    gtxna 1 ApplicationArgs 1\n    byte \"${name}\"\n    ==\n    &&\n    assert\n    b main_l27\n    main_l30:\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 97\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 122\n    <=\n    &&\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 48\n    >=\n    byte \"${name}\"\n    load 0\n    getbyte\n    int 57\n    <=\n    &&\n    ||\n    assert\n    load 0\n    int 1\n    +\n    store 0\n    b main_l23\n    main_l31:\n    return`;\n}\n","import algosdk from \"algosdk\";\nimport { APP_ID, REGISTRATION_PRICE, TRANSFER_FEE } from \"../constants\";\nimport { generateTeal } from \"./generateTeal\";\n\nexport class Transactions {\n  private algodClient: any;\n\n  constructor(client?: any) {\n    this.algodClient = client;\n  }\n\n  async generateLsig(name: string) {\n    const client = this.algodClient;\n    let program = await client.compile(generateTeal(name)).do();\n    program = new Uint8Array(Buffer.from(program.result, \"base64\"));\n\n    return new algosdk.LogicSigAccount(program);\n  }\n\n  async prepareNameRegistrationTransactions(\n    name: string,\n    address: string,\n    period: number\n  ) {\n    const algodClient = this.algodClient;\n\n    /* 1st Txn - Payment to Smart Contract */\n\n    let amount = 0;\n    const lsig = await this.generateLsig(name);\n    const params = await algodClient.getTransactionParams().do();\n\n    params.fee = 1000;\n    params.flatFee = true;\n\n    let receiver = algosdk.getApplicationAddress(APP_ID);\n    let sender = address;\n\n    if (period === undefined) period = 0;\n    else period--;\n\n    if (name.length < 3) return;\n    else if (name.length === 3)\n      amount =\n        REGISTRATION_PRICE.CHAR_3_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_3_AMOUNT;\n    else if (name.length === 4)\n      amount =\n        REGISTRATION_PRICE.CHAR_4_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_4_AMOUNT;\n    else if (name.length >= 5)\n      amount =\n        REGISTRATION_PRICE.CHAR_5_AMOUNT +\n        period * REGISTRATION_PRICE.CHAR_5_AMOUNT;\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n\n    const txn1 = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amount,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    const groupTxns = [];\n    groupTxns.push(txn1);\n\n    /* 2nd Txn - Funding Lsig */\n\n    sender = address;\n    receiver = lsig.address();\n    amount = 915000;\n\n    const txn2 = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amount,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    groupTxns.push(txn2);\n\n    /* 3rd Txn - Optin to App from Lsig */\n\n    const txn3 = await algosdk.makeApplicationOptInTxnFromObject({\n      from: lsig.address(),\n      suggestedParams: params,\n      appIndex: APP_ID,\n    });\n\n    groupTxns.push(txn3);\n\n    sender = lsig.address();\n    receiver = address;\n    amount = 0;\n\n    /* 4th Txn - Account registers name */\n\n    const method = \"register_name\";\n\n    const appArgs = [];\n\n    period++;\n\n    appArgs.push(new Uint8Array(Buffer.from(method)));\n    appArgs.push(new Uint8Array(Buffer.from(name)));\n    appArgs.push(algosdk.encodeUint64(period));\n    const txn4 = await algosdk.makeApplicationNoOpTxn(\n      address,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n    groupTxns.push(txn4);\n\n    algosdk.assignGroupID(groupTxns);\n\n    const signedOptinTxn = algosdk.signLogicSigTransaction(groupTxns[2], lsig);\n\n    return {\n      optinTxn: signedOptinTxn,\n      txns: groupTxns,\n      unsignedOptinTxn: groupTxns[2],\n    };\n  }\n\n  async prepareUpdateNamePropertyTransactions(\n    name: string,\n    address: string,\n    editedHandles: any\n  ) {\n    const algodClient = this.algodClient;\n\n    const lsig = await this.generateLsig(name);\n    const params = await algodClient.getTransactionParams().do();\n    params.fee = 1000;\n    params.flatFee = true;\n\n    const method = \"update_name\";\n\n    const groupTxns = [];\n\n    for (const key in editedHandles) {\n      const appArgs = [];\n      const network = key;\n      const handle = editedHandles[key];\n\n      appArgs.push(new Uint8Array(Buffer.from(method)));\n      appArgs.push(new Uint8Array(Buffer.from(network)));\n      appArgs.push(new Uint8Array(Buffer.from(handle)));\n\n      const txn = await algosdk.makeApplicationNoOpTxn(\n        address,\n        params,\n        APP_ID,\n        appArgs,\n        [lsig.address()]\n      );\n      groupTxns.push(txn);\n    }\n\n    if (Object.keys(editedHandles).length > 1) algosdk.assignGroupID(groupTxns);\n\n    return groupTxns;\n  }\n\n  async preparePaymentTxn(\n    sender: string,\n    receiver: string,\n    amt: number,\n    note?: any\n  ) {\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n    amt = algosdk.algosToMicroalgos(amt);\n    const enc = new TextEncoder();\n    note = enc.encode(note);\n    const closeToRemaninder = undefined;\n\n    return algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n  }\n\n  async prepareNameRenewalTxns(\n    name: string,\n    sender: string,\n    years: number,\n    amt: number\n  ) {\n    name = name.split(\".algo\")[0];\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n    const receiver = algosdk.getApplicationAddress(APP_ID);\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const paymentTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"renew_name\")));\n    appArgs.push(algosdk.encodeUint64(years));\n\n    const applicationTxn = algosdk.makeApplicationNoOpTxn(\n      sender,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n\n    algosdk.assignGroupID([paymentTxn, applicationTxn]);\n\n    return [paymentTxn, applicationTxn];\n  }\n\n  async prepareInitiateNameTransferTransaction(\n    name: string,\n    sender: string,\n    newOwner: string,\n    price: number\n  ) {\n    const algodClient = this.algodClient;\n    price = algosdk.algosToMicroalgos(price);\n    const params = await algodClient.getTransactionParams().do();\n    name = name.split(\".algo\")[0];\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"initiate_transfer\")));\n    appArgs.push(algosdk.encodeUint64(price));\n\n    return algosdk.makeApplicationNoOpTxn(sender, params, APP_ID, appArgs, [\n      lsig.address(),\n      newOwner,\n    ]);\n  }\n\n  async prepareAcceptNameTransferTransactions(\n    name: string,\n    sender: string,\n    receiver: string,\n    amt: number\n  ) {\n    amt = algosdk.algosToMicroalgos(amt);\n    const algodClient = this.algodClient;\n    const params = await algodClient.getTransactionParams().do();\n\n    const closeToRemaninder = undefined;\n    const note = undefined;\n    const paymentToOwnerTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      amt,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    receiver = algosdk.getApplicationAddress(APP_ID);\n\n    const paymentToSmartContractTxn = algosdk.makePaymentTxnWithSuggestedParams(\n      sender,\n      receiver,\n      TRANSFER_FEE,\n      closeToRemaninder,\n      note,\n      params\n    );\n\n    name = name.split(\".algo\")[0];\n\n    const lsig = await this.generateLsig(name);\n\n    const appArgs = [];\n    appArgs.push(new Uint8Array(Buffer.from(\"accept_transfer\")));\n\n    const applicationTxn = algosdk.makeApplicationNoOpTxn(\n      sender,\n      params,\n      APP_ID,\n      appArgs,\n      [lsig.address()]\n    );\n\n    algosdk.assignGroupID([\n      paymentToOwnerTxn,\n      paymentToSmartContractTxn,\n      applicationTxn,\n    ]);\n\n    return [paymentToOwnerTxn, paymentToSmartContractTxn, applicationTxn];\n  }\n}\n","import algosdk from \"algosdk\";\nimport { ASCII_CODES } from \"../constants\";\n\nexport function isValidAddress(address: string): boolean {\n  return algosdk.isValidAddress(address);\n}\n\nexport function isValidName(name: any): boolean {\n  name = name.split(\".algo\")[0];\n  const lengthOfName = name.length;\n  for (let i = 0; i < lengthOfName; i++) {\n    if (\n      !(\n        name.charCodeAt(i) >= ASCII_CODES.ASCII_0 &&\n        name.charCodeAt(i) <= ASCII_CODES.ASCII_9\n      )\n    ) {\n      if (\n        !(\n          name.charCodeAt(i) >= ASCII_CODES.ASCII_A &&\n          name.charCodeAt(i) <= ASCII_CODES.ASCII_Z\n        )\n      )\n        return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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","names":[]}